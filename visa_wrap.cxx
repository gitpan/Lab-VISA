/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.27
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/***********************************************************************
 *
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 *
 ************************************************************************/

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#  if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#    define SWIGTEMPLATEDISAMBIGUATOR template
#  else
#    define SWIGTEMPLATEDISAMBIGUATOR 
#  endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__) || defined(__ICC)
#   define SWIGUNUSED __attribute__ ((unused)) 
# else
#   define SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods for Windows DLLs */
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   define SWIGEXPORT
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif


/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;


/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (int)(*f1 - *f2);
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}


/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* ---------------------------------------------------------------------- -*- c -*-
 * perl5.swg
 *
 * Perl5 runtime library
 * $Header: /cvsroot/swig/SWIG/Lib/perl5/perlrun.swg,v 1.21 2005/02/01 00:08:17 wuzzeb Exp $
 * ----------------------------------------------------------------------------- */

#define SWIGPERL
#define SWIGPERL5
#ifdef __cplusplus
/* Needed on some windows machines---since MS plays funny games with the header files under C++ */
#include <math.h>
#include <stdlib.h>
extern "C" {
#endif
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

/* Get rid of free and malloc defined by perl */
#undef free
#undef malloc

#ifndef pTHX_
#define pTHX_
#endif

#include <string.h>
#ifdef __cplusplus
}
#endif

/* Macro to call an XS function */

#ifdef PERL_OBJECT 
#  define SWIG_CALLXS(_name) _name(cv,pPerl) 
#else 
#  ifndef MULTIPLICITY 
#    define SWIG_CALLXS(_name) _name(cv) 
#  else 
#    define SWIG_CALLXS(_name) _name(PERL_GET_THX, cv) 
#  endif 
#endif 

/* Contract support */

#define SWIG_contract_assert(expr,msg) if (!(expr)) { SWIG_croak(msg); } else

/* Note: SwigMagicFuncHack is a typedef used to get the C++ compiler to just shut up already */

#ifdef PERL_OBJECT
#define MAGIC_PPERL  CPerlObj *pPerl = (CPerlObj *) this;
typedef int (CPerlObj::*SwigMagicFunc)(SV *, MAGIC *);

#ifdef __cplusplus
extern "C" {
#endif
typedef int (CPerlObj::*SwigMagicFuncHack)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)
#define SWIGCLASS_STATIC
#else
#define MAGIC_PPERL
#define SWIGCLASS_STATIC static
#ifndef MULTIPLICITY
#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)
typedef int (*SwigMagicFunc)(SV *, MAGIC *);

#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFuncHack)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif


#else
#define SWIG_MAGIC(a,b) (struct interpreter *interp, SV *a, MAGIC *b)
typedef int (*SwigMagicFunc)(struct interpreter *, SV *, MAGIC *);
#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFuncHack)(struct interpreter *, SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#endif
#endif

#if defined(WIN32) && defined(PERL_OBJECT) && !defined(PerlIO_exportFILE)
#define PerlIO_exportFILE(fh,fl) (FILE*)(fh)
#endif

/* Modifications for newer Perl 5.005 releases */

#if !defined(PERL_REVISION) || ((PERL_REVISION >= 5) && ((PERL_VERSION < 5) || ((PERL_VERSION == 5) && (PERL_SUBVERSION < 50))))
#  ifndef PL_sv_yes
#    define PL_sv_yes sv_yes
#  endif
#  ifndef PL_sv_undef
#    define PL_sv_undef sv_undef
#  endif
#  ifndef PL_na
#    define PL_na na
#  endif
#endif

#include <stdlib.h>

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_OWNER 1
#define SWIG_SHADOW 2

/* Common SWIG API */

#ifdef PERL_OBJECT
#  define SWIG_ConvertPtr(obj, pp, type, flags) \
     SWIG_Perl_ConvertPtr(pPerl, obj, pp, type, flags)
#  define SWIG_NewPointerObj(p, type, flags) \
     SWIG_Perl_NewPointerObj(pPerl, p, type, flags)
#  define SWIG_MakePackedObj(sv, p, s, type)	\
     SWIG_Perl_MakePackedObj(pPerl, sv, p, s, type)
#  define SWIG_ConvertPacked(obj, p, s, type, flags) \
     SWIG_Perl_ConvertPacked(pPerl, obj, p, s, type, flags)

#else
#  define SWIG_ConvertPtr(obj, pp, type, flags) \
     SWIG_Perl_ConvertPtr(obj, pp, type, flags)
#  define SWIG_NewPointerObj(p, type, flags) \
     SWIG_Perl_NewPointerObj(p, type, flags)
#  define SWIG_MakePackedObj(sv, p, s, type)	\
     SWIG_Perl_MakePackedObj(sv, p, s, type )
#  define SWIG_ConvertPacked(obj, p, s, type, flags) \
     SWIG_Perl_ConvertPacked(obj, p, s, type, flags)
#endif

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Perl_GetModule()
#define SWIG_SetModule(clientdata, pointer) SWIG_Perl_SetModule(pointer)

/* Perl-specific API */
#ifdef PERL_OBJECT
#  define SWIG_MakePtr(sv, ptr, type, flags) \
     SWIG_Perl_MakePtr(pPerl, sv, ptr, type, flags)
#  define SWIG_SetError(str) \
     SWIG_Perl_SetError(pPerl, str)
#else
#  define SWIG_MakePtr(sv, ptr, type, flags) \
     SWIG_Perl_MakePtr(sv, ptr, type, flags)
#  define SWIG_SetError(str) \
     SWIG_Perl_SetError(str)
#  define SWIG_SetErrorSV(str) \
     SWIG_Perl_SetErrorSV(str)
#endif

#define SWIG_SetErrorf SWIG_Perl_SetErrorf


#ifdef PERL_OBJECT
#  define SWIG_MAYBE_PERL_OBJECT CPerlObj *pPerl,
#else
#  define SWIG_MAYBE_PERL_OBJECT
#endif

static swig_cast_info *
SWIG_Perl_TypeCheckRV(SWIG_MAYBE_PERL_OBJECT SV *rv, swig_type_info *ty) {
  SWIG_TypeCheck_Template(sv_derived_from(rv, (char *) iter->type->name), ty);
}

/* Function for getting a pointer value */

static int
SWIG_Perl_ConvertPtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void **ptr, swig_type_info *_t, int flags) {
  swig_cast_info *tc;
  void *voidptr = (void *)0;

  /* If magical, apply more magic */
  if (SvGMAGICAL(sv))
    mg_get(sv);

  /* Check to see if this is an object */
  if (sv_isobject(sv)) {
    SV *tsv = (SV*) SvRV(sv);
    IV tmp = 0;
    if ((SvTYPE(tsv) == SVt_PVHV)) {
      MAGIC *mg;
      if (SvMAGICAL(tsv)) {
        mg = mg_find(tsv,'P');
        if (mg) {
          sv = mg->mg_obj;
          if (sv_isobject(sv)) {
            tmp = SvIV((SV*)SvRV(sv));
          }
        }
      } else {
        return -1;
      }
    } else {
      tmp = SvIV((SV*)SvRV(sv));
    }
    voidptr = (void *)tmp;
    if (!_t) {
      *(ptr) = voidptr;
      return 0;
    }
  } else if (! SvOK(sv)) {            /* Check for undef */
    *(ptr) = (void *) 0;
    return 0;
  } else if (SvTYPE(sv) == SVt_RV) {  /* Check for NULL pointer */
    *(ptr) = (void *) 0;
    if (!SvROK(sv))
      return 0;
    else
      return -1;
  } else {                            /* Don't know what it is */
    *(ptr) = (void *) 0;
    return -1;
  }
  if (_t) {
    /* Now see if the types match */
    char *_c = HvNAME(SvSTASH(SvRV(sv)));
    tc = SWIG_TypeCheck(_c,_t);
    if (!tc) {
      *ptr = voidptr;
      return -1;
    }
    *ptr = SWIG_TypeCast(tc,voidptr);
    return 0;
  }
  *ptr = voidptr;
  return 0;
}

static void
SWIG_Perl_MakePtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, swig_type_info *t, int flags) {
  if (ptr && (flags & SWIG_SHADOW)) {
    SV *self;
    SV *obj=newSV(0);
    HV *hash=newHV();
    HV *stash;
    sv_setref_pv(obj, (char *) t->name, ptr);
    stash=SvSTASH(SvRV(obj));
    if (flags & SWIG_OWNER) {
      HV *hv;
      GV *gv=*(GV**)hv_fetch(stash, "OWNER", 5, TRUE);
      if (!isGV(gv))
        gv_init(gv, stash, "OWNER", 5, FALSE);
      hv=GvHVn(gv);
      hv_store_ent(hv, obj, newSViv(1), 0);
    }
    sv_magic((SV *)hash, (SV *)obj, 'P', Nullch, 0);
    SvREFCNT_dec(obj);
    self=newRV_noinc((SV *)hash);
    sv_setsv(sv, self);
    SvREFCNT_dec((SV *)self);
    sv_bless(sv, stash);
  }
  else {
    sv_setref_pv(sv, (char *) t->name, ptr);
  }
}

static SWIGINLINE SV *
SWIG_Perl_NewPointerObj(SWIG_MAYBE_PERL_OBJECT void *ptr, swig_type_info *t, int flags) {
  SV *result = sv_newmortal();
  SWIG_MakePtr(result, ptr, t, flags);
  return result;
}

static void
  SWIG_Perl_MakePackedObj(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  sv_setpv(sv, result);
}

/* Convert a packed value value */
static int
SWIG_Perl_ConvertPacked(SWIG_MAYBE_PERL_OBJECT SV *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char  *c = 0;

  if ((!obj) || (!SvOK(obj))) return -1;
  c = SvPV(obj, PL_na);
  /* Pointer values must start with leading underscore */
  if (*c != '_') return -1;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) return -1;
  }
  return 0;
}

static SWIGINLINE void
SWIG_Perl_SetError(SWIG_MAYBE_PERL_OBJECT const char *error) {
  if (error) sv_setpv(perl_get_sv("@", TRUE), error);
}

static SWIGINLINE void
SWIG_Perl_SetErrorSV(SWIG_MAYBE_PERL_OBJECT SV *error) {
  if (error) sv_setsv(perl_get_sv("@", TRUE), error);
}

static void
SWIG_Perl_SetErrorf(const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  sv_vsetpvfn(perl_get_sv("@", TRUE), fmt, strlen(fmt), &args, Null(SV**), 0, Null(bool*));
  va_end(args);
}

/* Macros for low-level exception handling */
#define SWIG_fail       goto fail
#define SWIG_croak(x)   { SWIG_SetError(x); goto fail; }
#define SWIG_croakSV(x) { SWIG_SetErrorSV(x); goto fail; }
/* most preprocessors do not support vararg macros :-( */
/* #define SWIG_croakf(x...) { SWIG_SetErrorf(x); goto fail; } */


typedef XS(SwigPerlWrapper);
typedef SwigPerlWrapper *SwigPerlWrapperPtr;

/* Structure for command table */
typedef struct {
  const char         *name;
  SwigPerlWrapperPtr  wrapper;
} swig_command_info;

/* Information for constant table */

#define SWIG_INT     1
#define SWIG_FLOAT   2
#define SWIG_STRING  3
#define SWIG_POINTER 4
#define SWIG_BINARY  5

/* Constant information structure */
typedef struct swig_constant_info {
    int              type;
    const char      *name;
    long             lvalue;
    double           dvalue;
    void            *pvalue;
    swig_type_info **ptype;
} swig_constant_info;

#ifdef __cplusplus
}
#endif

/* Structure for variable table */
typedef struct {
  const char   *name;
  SwigMagicFunc   set;
  SwigMagicFunc   get;
  swig_type_info  **type;
} swig_variable_info;

/* Magic variable code */
#ifndef PERL_OBJECT
#define swig_create_magic(s,a,b,c) _swig_create_magic(s,a,b,c)
  #ifndef MULTIPLICITY
     static void _swig_create_magic(SV *sv, char *name, int (*set)(SV *, MAGIC *), int (*get)(SV *,MAGIC *)) {
  #else
     static void _swig_create_magic(SV *sv, char *name, int (*set)(struct interpreter*, SV *, MAGIC *), int (*get)(struct interpreter*, SV *,MAGIC *)) {
  #endif
#else
#  define swig_create_magic(s,a,b,c) _swig_create_magic(pPerl,s,a,b,c)
static void _swig_create_magic(CPerlObj *pPerl, SV *sv, const char *name, int (CPerlObj::*set)(SV *, MAGIC *), int (CPerlObj::*get)(SV *, MAGIC *)) {
#endif
  MAGIC *mg;
  sv_magic(sv,sv,'U',(char *) name,strlen(name));
  mg = mg_find(sv,'U');
  mg->mg_virtual = (MGVTBL *) malloc(sizeof(MGVTBL));
  mg->mg_virtual->svt_get = (SwigMagicFuncHack) get;
  mg->mg_virtual->svt_set = (SwigMagicFuncHack) set;
  mg->mg_virtual->svt_len = 0;
  mg->mg_virtual->svt_clear = 0;
  mg->mg_virtual->svt_free = 0;
}


static swig_module_info *
SWIG_Perl_GetModule() {
  static void *type_pointer = (void *)0;
  SV *pointer;

  /* first check if pointer already created */
  if (!type_pointer) {
    pointer = get_sv("swig_runtime_data::type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, FALSE);
    if (pointer && SvOK(pointer)) {
      type_pointer = INT2PTR(swig_type_info **, SvIV(pointer));
    }
  }

  return (swig_module_info *) type_pointer;
}

static void
SWIG_Perl_SetModule(swig_module_info *module) {
  SV *pointer;

  /* create a new pointer */
  pointer = get_sv("swig_runtime_data::type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TRUE);
  sv_setiv(pointer, PTR2IV(module));
}

#ifdef do_open
  #undef do_open
#endif
#ifdef do_close
  #undef do_close
#endif
#ifdef scalar
  #undef scalar
#endif
#ifdef list
  #undef list
#endif
#ifdef apply
  #undef apply
#endif
#ifdef convert
  #undef convert
#endif
#ifdef Error
  #undef Error
#endif
#ifdef form
  #undef form
#endif
#ifdef vform
  #undef vform
#endif
#ifdef LABEL
  #undef LABEL
#endif
#ifdef METHOD
  #undef METHOD
#endif
#ifdef Move
  #undef Move
#endif
#ifdef yylex
  #undef yylex
#endif
#ifdef yyparse
  #undef yyparse
#endif
#ifdef yyerror
  #undef yyerror
#endif
#ifdef invert
  #undef invert
#endif
#ifdef ref
  #undef ref
#endif
#ifdef ENTER
  #undef ENTER
#endif
#ifdef read
  #undef read
#endif
#ifdef write
  #undef write
#endif
#ifdef eof
  #undef eof
#endif
#ifdef bool
  #undef bool
#endif
#ifdef close
  #undef close
#endif
#ifdef rewind
  #undef rewind
#endif



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_char swig_types[0]
#define SWIGTYPE_p_double swig_types[1]
#define SWIGTYPE_p_float swig_types[2]
#define SWIGTYPE_p_long swig_types[3]
#define SWIGTYPE_p_p_char swig_types[4]
#define SWIGTYPE_p_short swig_types[5]
#define SWIGTYPE_p_signed_char swig_types[6]
#define SWIGTYPE_p_unsigned_char swig_types[7]
#define SWIGTYPE_p_unsigned_long swig_types[8]
#define SWIGTYPE_p_unsigned_short swig_types[9]
static swig_type_info *swig_types[11];
static swig_module_info swig_module = {swig_types, 10, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    boot_Lab__VISA

#define SWIG_name   "Lab::VISAc::boot_Lab__VISA"
#define SWIG_prefix "Lab::VISAc::"

#ifdef __cplusplus
extern "C"
#endif
#ifndef PERL_OBJECT
#ifndef MULTIPLICITY
SWIGEXPORT void SWIG_init (CV* cv);
#else
SWIGEXPORT void SWIG_init (pTHXo_ CV* cv);
#endif
#else
SWIGEXPORT void SWIG_init (CV *cv, CPerlObj *);
#endif


#include "visa.h"

#ifdef PERL_OBJECT
#define MAGIC_CLASS _wrap_Lab::VISA_var::
class _wrap_Lab::VISA_var : public CPerlObj {
public:
#else
#define MAGIC_CLASS
#endif
SWIGCLASS_STATIC int swig_magic_readonly(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    sv = sv; mg = mg;
    croak("Value is read-only.");
    return 0;
}


#ifdef PERL_OBJECT
};
#endif

#ifdef __cplusplus
extern "C" {
#endif
XS(_wrap_viOpenDefaultRM) {
    {
        ViSession *arg1 = (ViSession *) 0 ;
        ViStatus result;
        unsigned long temp1 ;
        int argvi = 0;
        dXSARGS;
        
        arg1 = &temp1;
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: viOpenDefaultRM();");
        }
        result = (ViStatus)viOpenDefaultRM(arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            if (argvi >= items) {
                EXTEND(sp,1);
            }
            ST(argvi) = sv_newmortal();
            sv_setuv(ST(argvi),(UV) *(arg1));
            argvi++;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_viOpen) {
    {
        ViSession arg1 ;
        ViRsrc arg2 = (ViRsrc) 0 ;
        ViAccessMode arg3 ;
        ViUInt32 arg4 ;
        ViSession *arg5 = (ViSession *) 0 ;
        ViStatus result;
        unsigned long temp5 ;
        int argvi = 0;
        dXSARGS;
        
        arg5 = &temp5;
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: viOpen(sesn,name,mode,timeout);");
        }
        arg1 = (ViSession) SvUV(ST(0));
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (ViRsrc) SvPV(ST(1), PL_na);
        arg3 = (ViAccessMode) SvUV(ST(2));
        arg4 = (ViUInt32) SvUV(ST(3));
        result = (ViStatus)viOpen(arg1,arg2,arg3,arg4,arg5);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            if (argvi >= items) {
                EXTEND(sp,1);
            }
            ST(argvi) = sv_newmortal();
            sv_setuv(ST(argvi),(UV) *(arg5));
            argvi++;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_viSetAttribute) {
    {
        ViObject arg1 ;
        ViAttr arg2 ;
        ViAttrState arg3 ;
        ViStatus result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: viSetAttribute(vi,attrName,attrValue);");
        }
        arg1 = (ViObject) SvUV(ST(0));
        arg2 = (ViAttr) SvUV(ST(1));
        arg3 = (ViAttrState) SvUV(ST(2));
        result = (ViStatus)viSetAttribute(arg1,arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_viGetAttribute) {
    {
        ViObject arg1 ;
        ViAttr arg2 ;
        void *arg3 = (void *) 0 ;
        ViStatus result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: viGetAttribute(vi,attrName,OUTPUT);");
        }
        arg1 = (ViObject) SvUV(ST(0));
        arg2 = (ViAttr) SvUV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, 0,0) < 0) {
                SWIG_croak("Type error in argument 3 of viGetAttribute. Expected _p_void");
            }
        }
        result = (ViStatus)viGetAttribute(arg1,arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_viWrite) {
    {
        ViSession arg1 ;
        ViBuf arg2 = (ViBuf) 0 ;
        ViUInt32 arg3 ;
        ViUInt32 *arg4 = (ViUInt32 *) 0 ;
        ViStatus result;
        unsigned long temp4 ;
        int argvi = 0;
        dXSARGS;
        
        arg4 = &temp4;
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: viWrite(vi,buf,cnt);");
        }
        arg1 = (ViSession) SvUV(ST(0));
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (ViBuf) SvPV(ST(1), PL_na);
        arg3 = (ViUInt32) SvUV(ST(2));
        result = (ViStatus)viWrite(arg1,arg2,arg3,arg4);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            if (argvi >= items) {
                EXTEND(sp,1);
            }
            ST(argvi) = sv_newmortal();
            sv_setuv(ST(argvi),(UV) *(arg4));
            argvi++;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_viClose) {
    {
        ViObject arg1 ;
        ViStatus result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: viClose(vi);");
        }
        arg1 = (ViObject) SvUV(ST(0));
        result = (ViStatus)viClose(arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_viClear) {
    {
        ViSession arg1 ;
        ViStatus result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: viClear(vi);");
        }
        arg1 = (ViSession) SvUV(ST(0));
        result = (ViStatus)viClear(arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_viRead) {
    {
        ViSession arg1 ;
        ViPBuf arg2 = (ViPBuf) 0 ;
        ViUInt32 arg3 ;
        ViUInt32 *arg4 = (ViUInt32 *) 0 ;
        ViStatus result;
        unsigned long temp4 ;
        int argvi = 0;
        SV * _saved[1] ;
        dXSARGS;
        
        arg4 = &temp4;
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: viRead(vi,buf,cnt);");
        }
        arg1 = (ViSession) SvUV(ST(0));
        {
            arg3 = (ViUInt32)SvIV(ST(1));
            arg2 = (ViPBuf) malloc(arg3 + 1);
        }
        _saved[0] = ST(1);
        result = (ViStatus)viRead(arg1,arg2,arg3,arg4);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            if (argvi >= items){
                EXTEND(sp, 1);
            }
            
            ST(argvi) = sv_newmortal();
            sv_setpv(ST(argvi),(char *)arg2);
            argvi++;
            free(arg2);
        }
        {
            if (argvi >= items) {
                EXTEND(sp,1);
            }
            ST(argvi) = sv_newmortal();
            sv_setuv(ST(argvi),(UV) *(arg4));
            argvi++;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_viFindRsrc) {
    {
        ViSession arg1 ;
        ViString arg2 = (ViString) 0 ;
        ViFindList *arg3 = (ViFindList *) 0 ;
        ViUInt32 *arg4 = (ViUInt32 *) 0 ;
        ViPChar arg5 = (ViPChar) 0 ;
        ViStatus result;
        unsigned long temp3 ;
        unsigned long temp4 ;
        char temp5[512+1] ;
        int argvi = 0;
        dXSARGS;
        
        arg3 = &temp3;
        arg4 = &temp4;
        {
            arg5 = (ViPChar) temp5;
        }
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: viFindRsrc(vi,expr);");
        }
        arg1 = (ViSession) SvUV(ST(0));
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (ViString) SvPV(ST(1), PL_na);
        result = (ViStatus)viFindRsrc(arg1,arg2,arg3,arg4,arg5);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            if (argvi >= items) {
                EXTEND(sp,1);
            }
            ST(argvi) = sv_newmortal();
            sv_setuv(ST(argvi),(UV) *(arg3));
            argvi++;
        }
        {
            if (argvi >= items) {
                EXTEND(sp,1);
            }
            ST(argvi) = sv_newmortal();
            sv_setuv(ST(argvi),(UV) *(arg4));
            argvi++;
        }
        {
            if (argvi >= items){
                EXTEND(sp, 1);
            }
            
            ST(argvi) = sv_newmortal();
            sv_setpv(ST(argvi),(char *)arg5);
            argvi++;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_viFindNext) {
    {
        ViFindList arg1 ;
        ViPChar arg2 = (ViPChar) 0 ;
        ViStatus result;
        char temp2[512+1] ;
        int argvi = 0;
        dXSARGS;
        
        {
            arg2 = (ViPChar) temp2;
        }
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: viFindNext(findList);");
        }
        arg1 = (ViFindList) SvUV(ST(0));
        result = (ViStatus)viFindNext(arg1,arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            if (argvi >= items){
                EXTEND(sp, 1);
            }
            
            ST(argvi) = sv_newmortal();
            sv_setpv(ST(argvi),(char *)arg2);
            argvi++;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_char = {"_p_char", "char *|ViByte *", 0, 0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *|ViReal64 *", 0, 0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|ViReal32 *", 0, 0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *|ViStatus *", 0, 0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **|ViPRsrc *", 0, 0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|ViInt16 *", 0, 0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|ViInt8 *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|ViUInt8 *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *|ViUInt32 *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|ViBoolean *", 0, 0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_long,
  &_swigt__p_p_char,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_long,
  _swigc__p_p_char,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_constant_info swig_constants[] = {
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RSRC_CLASS", (long) (0xBFFF0001UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RSRC_NAME", (long) (0xBFFF0002UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RSRC_IMPL_VERSION", (long) (0x3FFF0003UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RSRC_LOCK_STATE", (long) (0x3FFF0004UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_MAX_QUEUE_LENGTH", (long) (0x3FFF0005UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_USER_DATA", (long) (0x3FFF0007UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_FDC_CHNL", (long) (0x3FFF000DUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_FDC_MODE", (long) (0x3FFF000FUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_FDC_GEN_SIGNAL_EN", (long) (0x3FFF0011UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_FDC_USE_PAIR", (long) (0x3FFF0013UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_SEND_END_EN", (long) (0x3FFF0016UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_TERMCHAR", (long) (0x3FFF0018UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_TMO_VALUE", (long) (0x3FFF001AUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_GPIB_READDR_EN", (long) (0x3FFF001BUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_IO_PROT", (long) (0x3FFF001CUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_DMA_ALLOW_EN", (long) (0x3FFF001EUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_BAUD", (long) (0x3FFF0021UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_DATA_BITS", (long) (0x3FFF0022UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_PARITY", (long) (0x3FFF0023UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_STOP_BITS", (long) (0x3FFF0024UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_FLOW_CNTRL", (long) (0x3FFF0025UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RD_BUF_OPER_MODE", (long) (0x3FFF002AUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RD_BUF_SIZE", (long) (0x3FFF002BUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_WR_BUF_OPER_MODE", (long) (0x3FFF002DUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_WR_BUF_SIZE", (long) (0x3FFF002EUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_SUPPRESS_END_EN", (long) (0x3FFF0036UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_TERMCHAR_EN", (long) (0x3FFF0038UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_DEST_ACCESS_PRIV", (long) (0x3FFF0039UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_DEST_BYTE_ORDER", (long) (0x3FFF003AUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_SRC_ACCESS_PRIV", (long) (0x3FFF003CUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_SRC_BYTE_ORDER", (long) (0x3FFF003DUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_SRC_INCREMENT", (long) (0x3FFF0040UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_DEST_INCREMENT", (long) (0x3FFF0041UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_WIN_ACCESS_PRIV", (long) (0x3FFF0045UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_WIN_BYTE_ORDER", (long) (0x3FFF0047UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_GPIB_ATN_STATE", (long) (0x3FFF0057UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_GPIB_ADDR_STATE", (long) (0x3FFF005CUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_GPIB_CIC_STATE", (long) (0x3FFF005EUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_GPIB_NDAC_STATE", (long) (0x3FFF0062UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_GPIB_SRQ_STATE", (long) (0x3FFF0067UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_GPIB_SYS_CNTRL_STATE", (long) (0x3FFF0068UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_GPIB_HS488_CBL_LEN", (long) (0x3FFF0069UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_CMDR_LA", (long) (0x3FFF006BUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_VXI_DEV_CLASS", (long) (0x3FFF006CUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_MAINFRAME_LA", (long) (0x3FFF0070UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_MANF_NAME", (long) (0xBFFF0072UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_MODEL_NAME", (long) (0xBFFF0077UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_VXI_VME_INTR_STATUS", (long) (0x3FFF008BUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_VXI_TRIG_STATUS", (long) (0x3FFF008DUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_VXI_VME_SYSFAIL_STATE", (long) (0x3FFF0094UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_WIN_BASE_ADDR", (long) (0x3FFF0098UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_WIN_SIZE", (long) (0x3FFF009AUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_AVAIL_NUM", (long) (0x3FFF00ACUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_MEM_BASE", (long) (0x3FFF00ADUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_CTS_STATE", (long) (0x3FFF00AEUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_DCD_STATE", (long) (0x3FFF00AFUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_DSR_STATE", (long) (0x3FFF00B1UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_DTR_STATE", (long) (0x3FFF00B2UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_END_IN", (long) (0x3FFF00B3UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_END_OUT", (long) (0x3FFF00B4UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_REPLACE_CHAR", (long) (0x3FFF00BEUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_RI_STATE", (long) (0x3FFF00BFUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_RTS_STATE", (long) (0x3FFF00C0UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_XON_CHAR", (long) (0x3FFF00C1UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_XOFF_CHAR", (long) (0x3FFF00C2UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_WIN_ACCESS", (long) (0x3FFF00C3UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RM_SESSION", (long) (0x3FFF00C4UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_VXI_LA", (long) (0x3FFF00D5UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_MANF_ID", (long) (0x3FFF00D9UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_MEM_SIZE", (long) (0x3FFF00DDUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_MEM_SPACE", (long) (0x3FFF00DEUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_MODEL_CODE", (long) (0x3FFF00DFUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_SLOT", (long) (0x3FFF00E8UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_INTF_INST_NAME", (long) (0xBFFF00E9UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_IMMEDIATE_SERV", (long) (0x3FFF0100UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_INTF_PARENT_NUM", (long) (0x3FFF0101UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RSRC_SPEC_VERSION", (long) (0x3FFF0170UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_INTF_TYPE", (long) (0x3FFF0171UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_GPIB_PRIMARY_ADDR", (long) (0x3FFF0172UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_GPIB_SECONDARY_ADDR", (long) (0x3FFF0173UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RSRC_MANF_NAME", (long) (0xBFFF0174UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RSRC_MANF_ID", (long) (0x3FFF0175UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_INTF_NUM", (long) (0x3FFF0176UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_TRIG_ID", (long) (0x3FFF0177UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_GPIB_REN_STATE", (long) (0x3FFF0181UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_GPIB_UNADDR_EN", (long) (0x3FFF0184UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_DEV_STATUS_BYTE", (long) (0x3FFF0189UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_FILE_APPEND_EN", (long) (0x3FFF0192UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_VXI_TRIG_SUPPORT", (long) (0x3FFF0194UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_TCPIP_ADDR", (long) (0xBFFF0195UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_TCPIP_HOSTNAME", (long) (0xBFFF0196UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_TCPIP_PORT", (long) (0x3FFF0197UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_TCPIP_DEVICE_NAME", (long) (0xBFFF0199UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_TCPIP_NODELAY", (long) (0x3FFF019AUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_TCPIP_KEEPALIVE", (long) (0x3FFF019BUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_4882_COMPLIANT", (long) (0x3FFF019FUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_USB_SERIAL_NUM", (long) (0xBFFF01A0UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_USB_INTFC_NUM", (long) (0x3FFF01A1UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_USB_PROTOCOL", (long) (0x3FFF01A7UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_USB_MAX_INTR_SIZE", (long) (0x3FFF01AFUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_JOB_ID", (long) (0x3FFF4006UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_EVENT_TYPE", (long) (0x3FFF4010UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_SIGP_STATUS_ID", (long) (0x3FFF4011UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RECV_TRIG_ID", (long) (0x3FFF4012UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_INTR_STATUS_ID", (long) (0x3FFF4023UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_STATUS", (long) (0x3FFF4025UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RET_COUNT", (long) (0x3FFF4026UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_BUFFER", (long) (0x3FFF4027UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RECV_INTR_LEVEL", (long) (0x3FFF4041UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_OPER_NAME", (long) (0xBFFF4042UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_GPIB_RECV_CIC_STATE", (long) (0x3FFF4193UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RECV_TCPIP_ADDR", (long) (0xBFFF4198UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_USB_RECV_INTR_SIZE", (long) (0x3FFF41B0UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_USB_RECV_INTR_DATA", (long) (0xBFFF41B1UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_IO_COMPLETION", (long) (0x3FFF2009UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_TRIG", (long) (0xBFFF200AUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_SERVICE_REQ", (long) (0x3FFF200BUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_CLEAR", (long) (0x3FFF200DUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_EXCEPTION", (long) (0xBFFF200EUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_GPIB_CIC", (long) (0x3FFF2012UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_GPIB_TALK", (long) (0x3FFF2013UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_GPIB_LISTEN", (long) (0x3FFF2014UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_VXI_VME_SYSFAIL", (long) (0x3FFF201DUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_VXI_VME_SYSRESET", (long) (0x3FFF201EUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_VXI_SIGP", (long) (0x3FFF2020UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_VXI_VME_INTR", (long) (0xBFFF2021UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_TCPIP_CONNECT", (long) (0x3FFF2036UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_USB_INTR", (long) (0x3FFF2037UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ALL_ENABLED_EVENTS", (long) (0x3FFF7FFFUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SUCCESS_EVENT_EN", (long) (0x3FFF0002L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SUCCESS_EVENT_DIS", (long) (0x3FFF0003L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SUCCESS_QUEUE_EMPTY", (long) (0x3FFF0004L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SUCCESS_TERM_CHAR", (long) (0x3FFF0005L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SUCCESS_MAX_CNT", (long) (0x3FFF0006L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SUCCESS_DEV_NPRESENT", (long) (0x3FFF007DL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SUCCESS_TRIG_MAPPED", (long) (0x3FFF007EL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SUCCESS_QUEUE_NEMPTY", (long) (0x3FFF0080L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SUCCESS_NCHAIN", (long) (0x3FFF0098L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SUCCESS_NESTED_SHARED", (long) (0x3FFF0099L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SUCCESS_NESTED_EXCLUSIVE", (long) (0x3FFF009AL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SUCCESS_SYNC", (long) (0x3FFF009BL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_WARN_QUEUE_OVERFLOW", (long) (0x3FFF000CL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_WARN_CONFIG_NLOADED", (long) (0x3FFF0077L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_WARN_NULL_OBJECT", (long) (0x3FFF0082L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_WARN_NSUP_ATTR_STATE", (long) (0x3FFF0084L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_WARN_UNKNOWN_STATUS", (long) (0x3FFF0085L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_WARN_NSUP_BUF", (long) (0x3FFF0088L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_WARN_EXT_FUNC_NIMPL", (long) (0x3FFF00A9L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_FIND_BUFLEN", (long) (256), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_INTF_GPIB", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_INTF_VXI", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_INTF_GPIB_VXI", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_INTF_ASRL", (long) (4), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_INTF_TCPIP", (long) (6), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_INTF_USB", (long) (7), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_PROT_NORMAL", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_PROT_FDC", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_PROT_HS488", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_PROT_4882_STRS", (long) (4), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_PROT_USBTMC_VENDOR", (long) (5), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_FDC_NORMAL", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_FDC_STREAM", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_LOCAL_SPACE", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_A16_SPACE", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_A24_SPACE", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_A32_SPACE", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_OPAQUE_SPACE", (long) (0xFFFF), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_UNKNOWN_LA", (long) (-1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_UNKNOWN_SLOT", (long) (-1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_UNKNOWN_LEVEL", (long) (-1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_QUEUE", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_HNDLR", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SUSPEND_HNDLR", (long) (4), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ALL_MECH", (long) (0xFFFF), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ANY_HNDLR", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_ALL", (long) (-2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_SW", (long) (-1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_TTL0", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_TTL1", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_TTL2", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_TTL3", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_TTL4", (long) (4), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_TTL5", (long) (5), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_TTL6", (long) (6), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_TTL7", (long) (7), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_ECL0", (long) (8), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_ECL1", (long) (9), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_PANEL_IN", (long) (27), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_PANEL_OUT", (long) (28), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_PROT_DEFAULT", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_PROT_ON", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_PROT_OFF", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_PROT_SYNC", (long) (5), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_READ_BUF", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_WRITE_BUF", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_READ_BUF_DISCARD", (long) (4), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_WRITE_BUF_DISCARD", (long) (8), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_IO_IN_BUF", (long) (16), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_IO_OUT_BUF", (long) (32), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_IO_IN_BUF_DISCARD", (long) (64), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_IO_OUT_BUF_DISCARD", (long) (128), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_FLUSH_ON_ACCESS", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_FLUSH_WHEN_FULL", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_FLUSH_DISABLE", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_NMAPPED", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_USE_OPERS", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_DEREF_ADDR", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TMO_IMMEDIATE", (long) (0L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TMO_INFINITE", (long) (0xFFFFFFFFUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_NO_LOCK", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EXCLUSIVE_LOCK", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SHARED_LOCK", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_LOAD_CONFIG", (long) (4), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_NO_SEC_ADDR", (long) (0xFFFF), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_PAR_NONE", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_PAR_ODD", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_PAR_EVEN", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_PAR_MARK", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_PAR_SPACE", (long) (4), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_STOP_ONE", (long) (10), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_STOP_ONE5", (long) (15), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_STOP_TWO", (long) (20), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_FLOW_NONE", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_FLOW_XON_XOFF", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_FLOW_RTS_CTS", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_FLOW_DTR_DSR", (long) (4), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_END_NONE", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_END_LAST_BIT", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_END_TERMCHAR", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_END_BREAK", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_STATE_ASSERTED", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_STATE_UNASSERTED", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_STATE_UNKNOWN", (long) (-1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_BIG_ENDIAN", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_LITTLE_ENDIAN", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_DATA_PRIV", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_DATA_NPRIV", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_PROG_PRIV", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_PROG_NPRIV", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_BLCK_PRIV", (long) (4), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_BLCK_NPRIV", (long) (5), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_D64_PRIV", (long) (6), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_D64_NPRIV", (long) (7), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_WIDTH_8", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_WIDTH_16", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_WIDTH_32", (long) (4), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_REN_DEASSERT", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_REN_ASSERT", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_REN_DEASSERT_GTL", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_REN_ASSERT_ADDRESS", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_REN_ASSERT_LLO", (long) (4), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_REN_ASSERT_ADDRESS_LLO", (long) (5), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_REN_ADDRESS_GTL", (long) (6), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_ATN_DEASSERT", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_ATN_ASSERT", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_ATN_DEASSERT_HANDSHAKE", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_ATN_ASSERT_IMMEDIATE", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_HS488_DISABLED", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_HS488_NIMPL", (long) (-1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_UNADDRESSED", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_TALKER", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_LISTENER", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_VXI_CMD16", (long) (0x0200), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_VXI_CMD16_RESP16", (long) (0x0202), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_VXI_RESP16", (long) (0x0002), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_VXI_CMD32", (long) (0x0400), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_VXI_CMD32_RESP16", (long) (0x0402), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_VXI_CMD32_RESP32", (long) (0x0404), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_VXI_RESP32", (long) (0x0004), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASSERT_SIGNAL", (long) (-1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASSERT_USE_ASSIGNED", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASSERT_IRQ1", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASSERT_IRQ2", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASSERT_IRQ3", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASSERT_IRQ4", (long) (4), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASSERT_IRQ5", (long) (5), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASSERT_IRQ6", (long) (6), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASSERT_IRQ7", (long) (7), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_UTIL_ASSERT_SYSRESET", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_UTIL_ASSERT_SYSFAIL", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_UTIL_DEASSERT_SYSFAIL", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_VXI_CLASS_MEMORY", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_VXI_CLASS_EXTENDED", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_VXI_CLASS_MESSAGE", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_VXI_CLASS_REGISTER", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_VXI_CLASS_OTHER", (long) (4), 0, 0, 0},
{0,0,0,0,0,0}
};
#ifdef __cplusplus
}
#endif
static swig_variable_info swig_variables[] = {
{0,0,0,0}
};
static swig_command_info swig_commands[] = {
{"Lab::VISAc::viOpenDefaultRM", _wrap_viOpenDefaultRM},
{"Lab::VISAc::viOpen", _wrap_viOpen},
{"Lab::VISAc::viSetAttribute", _wrap_viSetAttribute},
{"Lab::VISAc::viGetAttribute", _wrap_viGetAttribute},
{"Lab::VISAc::viWrite", _wrap_viWrite},
{"Lab::VISAc::viClose", _wrap_viClose},
{"Lab::VISAc::viClear", _wrap_viClear},
{"Lab::VISAc::viRead", _wrap_viRead},
{"Lab::VISAc::viFindRsrc", _wrap_viFindRsrc},
{"Lab::VISAc::viFindNext", _wrap_viFindNext},
{0,0}
};
/*************************************************************************
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.

 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.

 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
**/

#ifdef __cplusplus
extern "C" {
#endif
    
    SWIGRUNTIME void
    SWIG_InitializeModule(void *clientdata) {
        swig_type_info *type, *ret;
        swig_cast_info *cast;
        size_t i;
        swig_module_info *module_head;
        static int init_run = 0;
        
        clientdata = clientdata;
        
        if (init_run) return;
        init_run = 1;
        
        /* Initialize the swig_module */
        swig_module.type_initial = swig_type_initial;
        swig_module.cast_initial = swig_cast_initial;
        
        /* Try and load any already created modules */
        module_head = SWIG_GetModule(clientdata);
        if (module_head) {
            swig_module.next = module_head->next;
            module_head->next = &swig_module;
        } else {
            /* This is the first module loaded */
            swig_module.next = &swig_module;
            SWIG_SetModule(clientdata, &swig_module);
        }
        
        /* Now work on filling in swig_module.types */
        for (i = 0; i < swig_module.size; ++i) {
            type = 0;
            
            /* if there is another module already loaded */
            if (swig_module.next != &swig_module) {
                type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
            }
            if (type) {
                /* Overwrite clientdata field */
                if (swig_module.type_initial[i]->clientdata) type->clientdata = swig_module.type_initial[i]->clientdata;
            } else {
                type = swig_module.type_initial[i];
            }
            
            /* Insert casting types */
            cast = swig_module.cast_initial[i];
            while (cast->type) {
                /* Don't need to add information already in the list */
                ret = 0;
                if (swig_module.next != &swig_module) {
                    ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
                }
                if (ret && type == swig_module.type_initial[i]) {
                    cast->type = ret;
                    ret = 0;
                }
                
                if (!ret) {
                    if (type->cast) {
                        type->cast->prev = cast;
                        cast->next = type->cast;
                    }
                    type->cast = cast;
                }
                
                cast++;
            }
            
            /* Set entry in modules->types array equal to the type */
            swig_module.types[i] = type;
        }
        swig_module.types[i] = 0;
    }
    
    /* This function will propagate the clientdata field of type to
    * any new swig_type_info structures that have been added into the list
    * of equivalent types.  It is like calling
    * SWIG_TypeClientData(type, clientdata) a second time.
    */
    SWIGRUNTIME void
    SWIG_PropagateClientData(void) {
        size_t i;
        swig_cast_info *equiv;
        static int init_run = 0;
        
        if (init_run) return;
        init_run = 1;
        
        for (i = 0; i < swig_module.size; i++) {
            if (swig_module.types[i]->clientdata) {
                equiv = swig_module.types[i]->cast;
                while (equiv) {
                    if (!equiv->converter) {
                        if (equiv->type && !equiv->type->clientdata)
                        SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
                    }
                    equiv = equiv->next;
                }
            }
        }
    }
    
#ifdef __cplusplus
}
#endif



#ifdef __cplusplus
extern "C"
#endif

XS(SWIG_init) {
    dXSARGS;
    int i;
    
    SWIG_InitializeModule(0);
    
    /* Install commands */
    for (i = 0; swig_commands[i].name; i++) {
        newXS((char*) swig_commands[i].name,swig_commands[i].wrapper, (char*)__FILE__);
    }
    
    /* Install variables */
    for (i = 0; swig_variables[i].name; i++) {
        SV *sv;
        sv = perl_get_sv((char*) swig_variables[i].name, TRUE | 0x2);
        if (swig_variables[i].type) {
            SWIG_MakePtr(sv,(void *)1, *swig_variables[i].type,0);
        } else {
            sv_setiv(sv,(IV) 0);
        }
        swig_create_magic(sv, (char *) swig_variables[i].name, swig_variables[i].set, swig_variables[i].get); 
    }
    
    /* Install constant */
    for (i = 0; swig_constants[i].type; i++) {
        SV *sv;
        sv = perl_get_sv((char*)swig_constants[i].name, TRUE | 0x2);
        switch(swig_constants[i].type) {
            case SWIG_INT:
            sv_setiv(sv, (IV) swig_constants[i].lvalue);
            break;
            case SWIG_FLOAT:
            sv_setnv(sv, (double) swig_constants[i].dvalue);
            break;
            case SWIG_STRING:
            sv_setpv(sv, (char *) swig_constants[i].pvalue);
            break;
            case SWIG_POINTER:
            SWIG_MakePtr(sv, swig_constants[i].pvalue, *(swig_constants[i].ptype),0);
            break;
            case SWIG_BINARY:
            SWIG_MakePackedObj(sv, swig_constants[i].pvalue, swig_constants[i].lvalue, *(swig_constants[i].ptype));
            break;
            default:
            break;
        }
        SvREADONLY_on(sv);
    }
    
    ST(0) = &PL_sv_yes;
    XSRETURN(1);
}

