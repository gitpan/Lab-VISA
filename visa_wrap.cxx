/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.17u-20030418-0936
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    inline SwigValueWrapper() : tt(0) { }
    inline ~SwigValueWrapper() { if (tt) delete tt; } 
    inline SwigValueWrapper& operator=(const T& t) { tt = new T(t); return *this; }
    inline operator T&() const { return *tt; }
    inline T *operator&() { return tt; }
};                                                    
#endif

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__)
#       if defined(_MSC_VER)
#               if defined(STATIC_LINKED)
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) extern a
#               else
#                       define SWIGEXPORT(a) __declspec(dllexport) a
#                       define SWIGIMPORT(a) extern a
#               endif
#       else
#               if defined(__BORLANDC__)
#                       define SWIGEXPORT(a) a _export
#                       define SWIGIMPORT(a) a _export
#               else
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) a
#               endif
#       endif
#else
#       define SWIGEXPORT(a) a
#       define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;                 
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;	
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);

#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti)
{
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;	
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
 l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty)
{
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
	s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) 
{
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) 
{
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
     ty = (*ty->dcast)(ptr);
     if (ty) lastty = ty;
  }
  return lastty;
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
	if ((strcmp(tc->name, equiv->name) == 0))
	  SWIG_TypeClientData(tc,clientdata);
	tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}
#endif

#ifdef __cplusplus
}

#endif

/* -----------------------------------------------------------------------------
 * perl5.swg
 *
 * Perl5 runtime library
 * $Header: /cvs/projects/SWIG/Lib/perl5/Attic/perlrun.swg,v 1.1.2.11 2002/11/19 19:26:01 beazley Exp $
 * ----------------------------------------------------------------------------- */

#define SWIGPERL
#define SWIGPERL5
#ifdef __cplusplus
/* Needed on some windows machines---since MS plays funny
   games with the header files under C++ */
#include <math.h>
#include <stdlib.h>
extern "C" {
#endif
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

/* Get rid of free and malloc defined by perl */
#undef free
#undef malloc

#ifndef pTHX_
#define pTHX_
#endif

#include <string.h>
#ifdef __cplusplus
}
#endif

/* Macro to call an XS function */

#ifdef PERL_OBJECT 
#define SWIG_CALLXS(_name) _name(cv,pPerl) 
#else 
#ifndef MULTIPLICITY 
#define SWIG_CALLXS(_name) _name(cv) 
#else 
#define SWIG_CALLXS(_name) _name(PERL_GET_THX, cv) 
#endif 
#endif 

/* Macros for low-level exception handling */
#define SWIG_fail      goto fail
#define SWIG_croak(x)  { if ((_swigerr = (const char *) x)) goto fail; }
#define SWIG_MAX_ERRMSG 256

/* Note: SwigMagicFuncHack is a typedef used to get the C++
   compiler to just shut up already */

#ifdef PERL_OBJECT
#define MAGIC_PPERL  CPerlObj *pPerl = (CPerlObj *) this;
typedef int (CPerlObj::*SwigMagicFunc)(SV *, MAGIC *);

#ifdef __cplusplus
extern "C" {
#endif
typedef int (CPerlObj::*SwigMagicFuncHack)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)
#define SWIGCLASS_STATIC
#else
#define MAGIC_PPERL
#define SWIGCLASS_STATIC static
#ifndef MULTIPLICITY
#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)
typedef int (*SwigMagicFunc)(SV *, MAGIC *);

#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFuncHack)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif


#else
#define SWIG_MAGIC(a,b) (struct interpreter *interp, SV *a, MAGIC *b)
typedef int (*SwigMagicFunc)(struct interpreter *, SV *, MAGIC *);
#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFuncHack)(struct interpreter *, SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#endif
#endif

#if defined(WIN32) && defined(PERL_OBJECT) && !defined(PerlIO_exportFILE)
#define PerlIO_exportFILE(fh,fl) (FILE*)(fh)
#endif

/* Modifications for newer Perl 5.005 releases */

#if !defined(PERL_REVISION) || ((PERL_REVISION >= 5) && ((PERL_VERSION < 5) || ((PERL_VERSION == 5) && (PERL_SUBVERSION < 50))))
#ifndef PL_sv_yes
#define PL_sv_yes sv_yes
#endif
#ifndef PL_sv_undef
#define PL_sv_undef sv_undef
#endif
#ifndef PL_na
#define PL_na na
#endif
#endif

#include <stdlib.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifdef SWIG_NOINCLUDE

#ifndef PERL_OBJECT
extern int SWIG_ConvertPtr(SV *, void **, swig_type_info *, int flags);
extern void SWIG_MakePtr(SV *, void *, swig_type_info *, int flags);
#else
extern int _SWIG_ConvertPtr(CPerlObj *, SV *, void **, swig_type_info *,int flags);
extern void _SWIG_MakePtr(CPerlObj *, SV *, void *, swig_type_info *, int flags);
#define SWIG_ConvertPtr(a,b,c,d) _SWIG_ConvertPtr(pPerl,a,b,c,d)
#define SWIG_MakePtr(a,b,c,d) _SWIG_MakePtr(pPerl,a,b,c,d)
#endif

#else

/* Function for getting a pointer value */

#ifndef PERL_OBJECT
SWIGRUNTIME(int) 
SWIG_ConvertPtr(SV *sv, void **ptr, swig_type_info *_t, int flags)
#else
#define SWIG_ConvertPtr(a,b,c,d) _SWIG_ConvertPtr(pPerl,a,b,c,d)
SWIGRUNTIME(int)
_SWIG_ConvertPtr(CPerlObj *pPerl, SV *sv, void **ptr, swig_type_info *_t, int flags)
#endif
{
  char *_c;
  swig_type_info *tc;
  IV   tmp;

  /* If magical, apply more magic */
  if (SvGMAGICAL(sv))
    mg_get(sv);

  /* Check to see if this is an object */
  if (sv_isobject(sv)) {
    SV *tsv = (SV*) SvRV(sv);
    if ((SvTYPE(tsv) == SVt_PVHV)) {
      MAGIC *mg;
      if (SvMAGICAL(tsv)) {
	mg = mg_find(tsv,'P');
	if (mg) {
	  SV *rsv = mg->mg_obj;
	  if (sv_isobject(rsv)) {
	    tmp = SvIV((SV*)SvRV(rsv));
	  }
	}
      } else {
	return -1;
      }
    } else {
      tmp = SvIV((SV*)SvRV(sv));
    }
    if (!_t) {
      *(ptr) = (void *) tmp;
      return 0;
    }
  } else if (! SvOK(sv)) {            /* Check for undef */
    *(ptr) = (void *) 0;
    return 0;
  } else if (SvTYPE(sv) == SVt_RV) {  /* Check for NULL pointer */
    *(ptr) = (void *) 0;
    if (!SvROK(sv)) 
      return 0;
    else
      return -1;
  } else {                            /* Don't know what it is */
      *(ptr) = (void *) 0;
      return -1;
  }
  if (_t) {
    /* Now see if the types match */      
    _c = HvNAME(SvSTASH(SvRV(sv)));
    tc = SWIG_TypeCheck(_c,_t);
    if (!tc) {
      *ptr = (void *) tmp;
      return -1;
    }
    *ptr = SWIG_TypeCast(tc,(void *)tmp);
    return 0;
  }
  *ptr = (void *) tmp;
  return 0;
}
#ifndef PERL_OBJECT
SWIGRUNTIME(void) 
SWIG_MakePtr(SV *sv, void *ptr, swig_type_info *t,int flags)
#else
#define SWIG_MakePtr(a,b,c,d) _SWIG_MakePtr(pPerl,a,b,c,d)
SWIGRUNTIME(void)
_SWIG_MakePtr(CPerlObj *pPerl, SV *sv, void *ptr, swig_type_info *t, int flags)
#endif
{
  sv_setref_pv(sv, (char *) t->name, ptr);
}

#endif

typedef XS(SwigPerlWrapper);
typedef SwigPerlWrapper *SwigPerlWrapperPtr;

/* Structure for command table */
typedef struct {
  const char         *name;
  SwigPerlWrapperPtr  wrapper;
} swig_command_info;

/* Information for constant table */

#define SWIG_INT     1
#define SWIG_FLOAT   2
#define SWIG_STRING  3
#define SWIG_POINTER 4
#define SWIG_BINARY  5

/* Constant information structure */
typedef struct swig_constant_info {
    int              type;
    const char      *name;
    long             lvalue;
    double           dvalue;
    void            *pvalue;
    swig_type_info **ptype;
} swig_constant_info;

#ifdef __cplusplus
}
#endif

/* Structure for variable table */
typedef struct {
  const char   *name;
  SwigMagicFunc   set;
  SwigMagicFunc   get;
  swig_type_info  **type;
} swig_variable_info;

/* Magic variable code */
#ifndef PERL_OBJECT
#define swig_create_magic(s,a,b,c) _swig_create_magic(s,a,b,c)
  #ifndef MULTIPLICITY 
       static void _swig_create_magic(SV *sv, char *name, int (*set)(SV *, MAGIC *), int \
(*get)(SV *,MAGIC *)) { 
  #else 
       static void _swig_create_magic(SV *sv, char *name, int (*set)(struct interpreter*,\
 SV *, MAGIC *), int (*get)(struct interpreter*, SV *,MAGIC *)) { 
  #endif 
#else
#define swig_create_magic(s,a,b,c) _swig_create_magic(pPerl,s,a,b,c)
static void _swig_create_magic(CPerlObj *pPerl, SV *sv, const char *name, int (CPerlObj::*set)(SV *, MAGIC *), int (CPerlObj::*get)(SV *, MAGIC *)) {
#endif
  MAGIC *mg;
  sv_magic(sv,sv,'U',(char *) name,strlen(name));
  mg = mg_find(sv,'U');
  mg->mg_virtual = (MGVTBL *) malloc(sizeof(MGVTBL));
  mg->mg_virtual->svt_get = (SwigMagicFuncHack) get;
  mg->mg_virtual->svt_set = (SwigMagicFuncHack) set;
  mg->mg_virtual->svt_len = 0;
  mg->mg_virtual->svt_clear = 0;
  mg->mg_virtual->svt_free = 0;
}







/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_ViUInt32 swig_types[0] 
#define  SWIGTYPE_p_ViFindList swig_types[1] 
#define  SWIGTYPE_p_ViSession swig_types[2] 
static swig_type_info *swig_types[4];

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    boot_Lab__VISA

#define SWIG_name   "Lab::VISA::boot_Lab__VISA"
#define SWIG_prefix "Lab::VISA::"

#ifdef __cplusplus
extern "C"
#endif
#ifndef PERL_OBJECT
#ifndef MULTIPLICITY
SWIGEXPORT(void) SWIG_init (CV* cv);
#else
SWIGEXPORT(void) SWIG_init (pTHXo_ CV* cv);
#endif
#else
SWIGEXPORT(void) SWIG_init (CV *cv, CPerlObj *);
#endif


#include "/usr/local/vxipnp/linux/include/visa.h"

extern ViStatus viOpenDefaultRM(ViSession *);
extern ViStatus viOpen(ViSession,ViRsrc,ViAccessMode,ViUInt32,ViSession *);
extern ViStatus viSetAttribute(ViObject,ViAttr,ViAttrState);
extern ViStatus viGetAttribute(ViObject,ViAttr,void *);
extern ViStatus viWrite(ViSession,ViBuf,ViUInt32,ViUInt32 *);
extern ViStatus viClose(ViObject);
extern ViStatus viClear(ViSession);
extern ViStatus viRead(ViSession,ViPBuf,ViUInt32,ViUInt32 *);
extern ViStatus viFindRsrc(ViSession,ViString,ViFindList *,ViUInt32 *,ViPChar);
extern ViStatus viFindNext(ViFindList,ViPChar);
#ifdef PERL_OBJECT
#define MAGIC_CLASS _wrap_Lab::VISA_var::
class _wrap_Lab::VISA_var : public CPerlObj {
public:
#else
#define MAGIC_CLASS
#endif
SWIGCLASS_STATIC int swig_magic_readonly(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    sv = sv; mg = mg;
    croak("Value is read-only.");
    return 0;
}


#ifdef PERL_OBJECT
};
#endif

#ifdef __cplusplus
extern "C" {
#endif
XS(_wrap_viOpenDefaultRM) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        ViSession *arg1 = (ViSession *) 0 ;
        ViStatus result;
        unsigned long temp1 ;
        int argvi = 0;
        dXSARGS;
        
        arg1 = &temp1;
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: viOpenDefaultRM();");
        }
        result = (ViStatus)viOpenDefaultRM(arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            if (argvi >= items) {
                EXTEND(sp,1);
            }
            ST(argvi) = sv_newmortal();
            sv_setuv(ST(argvi),(UV) *(arg1));
            argvi++;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_viOpen) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        ViSession arg1 ;
        ViRsrc arg2 ;
        ViAccessMode arg3 ;
        ViUInt32 arg4 ;
        ViSession *arg5 = (ViSession *) 0 ;
        ViStatus result;
        unsigned long temp5 ;
        int argvi = 0;
        dXSARGS;
        
        arg5 = &temp5;
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: viOpen(sesn,name,mode,timeout);");
        }
        arg1 = (ViSession) SvUV(ST(0));
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (ViRsrc) SvPV(ST(1), PL_na);
        arg3 = (ViAccessMode) SvUV(ST(2));
        arg4 = (ViUInt32) SvUV(ST(3));
        result = (ViStatus)viOpen(arg1,arg2,arg3,arg4,arg5);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            if (argvi >= items) {
                EXTEND(sp,1);
            }
            ST(argvi) = sv_newmortal();
            sv_setuv(ST(argvi),(UV) *(arg5));
            argvi++;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_viSetAttribute) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        ViObject arg1 ;
        ViAttr arg2 ;
        ViAttrState arg3 ;
        ViStatus result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: viSetAttribute(vi,attrName,attrValue);");
        }
        arg1 = (ViObject) SvUV(ST(0));
        arg2 = (ViAttr) SvUV(ST(1));
        arg3 = (ViAttrState) SvUV(ST(2));
        result = (ViStatus)viSetAttribute(arg1,arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_viGetAttribute) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        ViObject arg1 ;
        ViAttr arg2 ;
        void *arg3 = (void *) 0 ;
        ViStatus result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: viGetAttribute(vi,attrName,OUTPUT);");
        }
        arg1 = (ViObject) SvUV(ST(0));
        arg2 = (ViAttr) SvUV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, 0,0) < 0) {
                SWIG_croak("Type error in argument 3 of viGetAttribute. Expected _p_void");
            }
        }
        result = (ViStatus)viGetAttribute(arg1,arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_viWrite) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        ViSession arg1 ;
        ViBuf arg2 ;
        ViUInt32 arg3 ;
        ViUInt32 *arg4 = (ViUInt32 *) 0 ;
        ViStatus result;
        unsigned long temp4 ;
        int argvi = 0;
        dXSARGS;
        
        arg4 = &temp4;
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: viWrite(vi,buf,cnt);");
        }
        arg1 = (ViSession) SvUV(ST(0));
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (ViBuf) SvPV(ST(1), PL_na);
        arg3 = (ViUInt32) SvUV(ST(2));
        result = (ViStatus)viWrite(arg1,arg2,arg3,arg4);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            if (argvi >= items) {
                EXTEND(sp,1);
            }
            ST(argvi) = sv_newmortal();
            sv_setuv(ST(argvi),(UV) *(arg4));
            argvi++;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_viClose) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        ViObject arg1 ;
        ViStatus result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: viClose(vi);");
        }
        arg1 = (ViObject) SvUV(ST(0));
        result = (ViStatus)viClose(arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_viClear) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        ViSession arg1 ;
        ViStatus result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: viClear(vi);");
        }
        arg1 = (ViSession) SvUV(ST(0));
        result = (ViStatus)viClear(arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_viRead) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        ViSession arg1 ;
        ViPBuf arg2 ;
        ViUInt32 arg3 ;
        ViUInt32 *arg4 = (ViUInt32 *) 0 ;
        ViStatus result;
        unsigned long temp3 ;
        int argvi = 0;
        SV * _saved[1] ;
        dXSARGS;
        
        arg4 = &temp3;
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: viRead(vi,buf,cnt);");
        }
        arg1 = (ViSession) SvUV(ST(0));
        {
            arg3 = (ViUInt32)SvIV(ST(1));
            arg2 = (ViPBuf) malloc(arg3 + 1);
        }
        _saved[0] = ST(1);
        result = (ViStatus)viRead(arg1,arg2,arg3,arg4);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            if (argvi >= items){
                EXTEND(sp, 1);
            }
            
            ST(argvi) = sv_newmortal();
            sv_setpv(ST(argvi),(char *)arg2);
            argvi++;
            free(arg2);
        }
        {
            if (argvi >= items) {
                EXTEND(sp,1);
            }
            ST(argvi) = sv_newmortal();
            sv_setuv(ST(argvi),(UV) *(arg4));
            argvi++;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_viFindRsrc) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        ViSession arg1 ;
        ViString arg2 ;
        ViFindList *arg3 = (ViFindList *) 0 ;
        ViUInt32 *arg4 = (ViUInt32 *) 0 ;
        ViPChar arg5 ;
        ViStatus result;
        unsigned long temp3 ;
        unsigned long temp4 ;
        char temp5[512+1] ;
        int argvi = 0;
        dXSARGS;
        
        arg3 = &temp3;
        arg4 = &temp4;
        {
            arg5 = (ViPChar) temp5;
        }
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: viFindRsrc(vi,expr);");
        }
        arg1 = (ViSession) SvUV(ST(0));
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (ViString) SvPV(ST(1), PL_na);
        result = (ViStatus)viFindRsrc(arg1,arg2,arg3,arg4,arg5);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            if (argvi >= items) {
                EXTEND(sp,1);
            }
            ST(argvi) = sv_newmortal();
            sv_setuv(ST(argvi),(UV) *(arg3));
            argvi++;
        }
        {
            if (argvi >= items) {
                EXTEND(sp,1);
            }
            ST(argvi) = sv_newmortal();
            sv_setuv(ST(argvi),(UV) *(arg4));
            argvi++;
        }
        {
            if (argvi >= items){
                EXTEND(sp, 1);
            }
            
            ST(argvi) = sv_newmortal();
            sv_setpv(ST(argvi),(char *)arg5);
            argvi++;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_viFindNext) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        ViFindList arg1 ;
        ViPChar arg2 ;
        ViStatus result;
        char temp2[512+1] ;
        int argvi = 0;
        dXSARGS;
        
        {
            arg2 = (ViPChar) temp2;
        }
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: viFindNext(findList);");
        }
        arg1 = (ViFindList) SvUV(ST(0));
        result = (ViStatus)viFindNext(arg1,arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            if (argvi >= items){
                EXTEND(sp, 1);
            }
            
            ST(argvi) = sv_newmortal();
            sv_setpv(ST(argvi),(char *)arg2);
            argvi++;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_ViUInt32[] = {{"_p_ViUInt32", 0, "ViUInt32 *", 0},{"_p_ViUInt32"},{"_p_ViFindList"},{"_p_ViSession"},{0}};
static swig_type_info _swigt__p_ViFindList[] = {{"_p_ViFindList", 0, "ViFindList *", 0},{"_p_ViUInt32"},{"_p_ViFindList"},{"_p_ViSession"},{0}};
static swig_type_info _swigt__p_ViSession[] = {{"_p_ViSession", 0, "ViSession *", 0},{"_p_ViUInt32"},{"_p_ViFindList"},{"_p_ViSession"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_ViUInt32, 
_swigt__p_ViFindList, 
_swigt__p_ViSession, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_constant_info swig_constants[] = {
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RSRC_CLASS", (long) (0xBFFF0001UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RSRC_NAME", (long) (0xBFFF0002UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RSRC_IMPL_VERSION", (long) (0x3FFF0003UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RSRC_LOCK_STATE", (long) (0x3FFF0004UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_MAX_QUEUE_LENGTH", (long) (0x3FFF0005UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_USER_DATA", (long) (0x3FFF0007UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_FDC_CHNL", (long) (0x3FFF000DUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_FDC_MODE", (long) (0x3FFF000FUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_FDC_GEN_SIGNAL_EN", (long) (0x3FFF0011UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_FDC_USE_PAIR", (long) (0x3FFF0013UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_SEND_END_EN", (long) (0x3FFF0016UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_TERMCHAR", (long) (0x3FFF0018UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_TMO_VALUE", (long) (0x3FFF001AUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_GPIB_READDR_EN", (long) (0x3FFF001BUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_IO_PROT", (long) (0x3FFF001CUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_DMA_ALLOW_EN", (long) (0x3FFF001EUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_BAUD", (long) (0x3FFF0021UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_DATA_BITS", (long) (0x3FFF0022UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_PARITY", (long) (0x3FFF0023UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_STOP_BITS", (long) (0x3FFF0024UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_FLOW_CNTRL", (long) (0x3FFF0025UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RD_BUF_OPER_MODE", (long) (0x3FFF002AUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RD_BUF_SIZE", (long) (0x3FFF002BUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_WR_BUF_OPER_MODE", (long) (0x3FFF002DUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_WR_BUF_SIZE", (long) (0x3FFF002EUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_SUPPRESS_END_EN", (long) (0x3FFF0036UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_TERMCHAR_EN", (long) (0x3FFF0038UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_DEST_ACCESS_PRIV", (long) (0x3FFF0039UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_DEST_BYTE_ORDER", (long) (0x3FFF003AUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_SRC_ACCESS_PRIV", (long) (0x3FFF003CUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_SRC_BYTE_ORDER", (long) (0x3FFF003DUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_SRC_INCREMENT", (long) (0x3FFF0040UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_DEST_INCREMENT", (long) (0x3FFF0041UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_WIN_ACCESS_PRIV", (long) (0x3FFF0045UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_WIN_BYTE_ORDER", (long) (0x3FFF0047UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_GPIB_ATN_STATE", (long) (0x3FFF0057UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_GPIB_ADDR_STATE", (long) (0x3FFF005CUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_GPIB_CIC_STATE", (long) (0x3FFF005EUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_GPIB_NDAC_STATE", (long) (0x3FFF0062UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_GPIB_SRQ_STATE", (long) (0x3FFF0067UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_GPIB_SYS_CNTRL_STATE", (long) (0x3FFF0068UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_GPIB_HS488_CBL_LEN", (long) (0x3FFF0069UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_CMDR_LA", (long) (0x3FFF006BUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_VXI_DEV_CLASS", (long) (0x3FFF006CUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_MAINFRAME_LA", (long) (0x3FFF0070UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_MANF_NAME", (long) (0xBFFF0072UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_MODEL_NAME", (long) (0xBFFF0077UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_VXI_VME_INTR_STATUS", (long) (0x3FFF008BUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_VXI_TRIG_STATUS", (long) (0x3FFF008DUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_VXI_VME_SYSFAIL_STATE", (long) (0x3FFF0094UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_WIN_BASE_ADDR", (long) (0x3FFF0098UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_WIN_SIZE", (long) (0x3FFF009AUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_AVAIL_NUM", (long) (0x3FFF00ACUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_MEM_BASE", (long) (0x3FFF00ADUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_CTS_STATE", (long) (0x3FFF00AEUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_DCD_STATE", (long) (0x3FFF00AFUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_DSR_STATE", (long) (0x3FFF00B1UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_DTR_STATE", (long) (0x3FFF00B2UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_END_IN", (long) (0x3FFF00B3UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_END_OUT", (long) (0x3FFF00B4UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_REPLACE_CHAR", (long) (0x3FFF00BEUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_RI_STATE", (long) (0x3FFF00BFUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_RTS_STATE", (long) (0x3FFF00C0UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_XON_CHAR", (long) (0x3FFF00C1UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_ASRL_XOFF_CHAR", (long) (0x3FFF00C2UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_WIN_ACCESS", (long) (0x3FFF00C3UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RM_SESSION", (long) (0x3FFF00C4UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_VXI_LA", (long) (0x3FFF00D5UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_MANF_ID", (long) (0x3FFF00D9UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_MEM_SIZE", (long) (0x3FFF00DDUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_MEM_SPACE", (long) (0x3FFF00DEUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_MODEL_CODE", (long) (0x3FFF00DFUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_SLOT", (long) (0x3FFF00E8UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_INTF_INST_NAME", (long) (0xBFFF00E9UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_IMMEDIATE_SERV", (long) (0x3FFF0100UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_INTF_PARENT_NUM", (long) (0x3FFF0101UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RSRC_SPEC_VERSION", (long) (0x3FFF0170UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_INTF_TYPE", (long) (0x3FFF0171UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_GPIB_PRIMARY_ADDR", (long) (0x3FFF0172UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_GPIB_SECONDARY_ADDR", (long) (0x3FFF0173UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RSRC_MANF_NAME", (long) (0xBFFF0174UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RSRC_MANF_ID", (long) (0x3FFF0175UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_INTF_NUM", (long) (0x3FFF0176UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_TRIG_ID", (long) (0x3FFF0177UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_GPIB_REN_STATE", (long) (0x3FFF0181UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_GPIB_UNADDR_EN", (long) (0x3FFF0184UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_DEV_STATUS_BYTE", (long) (0x3FFF0189UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_FILE_APPEND_EN", (long) (0x3FFF0192UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_VXI_TRIG_SUPPORT", (long) (0x3FFF0194UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_TCPIP_ADDR", (long) (0xBFFF0195UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_TCPIP_HOSTNAME", (long) (0xBFFF0196UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_TCPIP_PORT", (long) (0x3FFF0197UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_TCPIP_DEVICE_NAME", (long) (0xBFFF0199UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_TCPIP_NODELAY", (long) (0x3FFF019AUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_TCPIP_KEEPALIVE", (long) (0x3FFF019BUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_4882_COMPLIANT", (long) (0x3FFF019FUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_USB_SERIAL_NUM", (long) (0xBFFF01A0UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_USB_INTFC_NUM", (long) (0x3FFF01A1UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_USB_PROTOCOL", (long) (0x3FFF01A7UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_USB_MAX_INTR_SIZE", (long) (0x3FFF01AFUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_JOB_ID", (long) (0x3FFF4006UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_EVENT_TYPE", (long) (0x3FFF4010UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_SIGP_STATUS_ID", (long) (0x3FFF4011UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RECV_TRIG_ID", (long) (0x3FFF4012UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_INTR_STATUS_ID", (long) (0x3FFF4023UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_STATUS", (long) (0x3FFF4025UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RET_COUNT", (long) (0x3FFF4026UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_BUFFER", (long) (0x3FFF4027UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RECV_INTR_LEVEL", (long) (0x3FFF4041UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_OPER_NAME", (long) (0xBFFF4042UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_GPIB_RECV_CIC_STATE", (long) (0x3FFF4193UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_RECV_TCPIP_ADDR", (long) (0xBFFF4198UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_USB_RECV_INTR_SIZE", (long) (0x3FFF41B0UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ATTR_USB_RECV_INTR_DATA", (long) (0xBFFF41B1UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_IO_COMPLETION", (long) (0x3FFF2009UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_TRIG", (long) (0xBFFF200AUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_SERVICE_REQ", (long) (0x3FFF200BUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_CLEAR", (long) (0x3FFF200DUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_EXCEPTION", (long) (0xBFFF200EUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_GPIB_CIC", (long) (0x3FFF2012UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_GPIB_TALK", (long) (0x3FFF2013UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_GPIB_LISTEN", (long) (0x3FFF2014UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_VXI_VME_SYSFAIL", (long) (0x3FFF201DUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_VXI_VME_SYSRESET", (long) (0x3FFF201EUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_VXI_SIGP", (long) (0x3FFF2020UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_VXI_VME_INTR", (long) (0xBFFF2021UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_TCPIP_CONNECT", (long) (0x3FFF2036UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EVENT_USB_INTR", (long) (0x3FFF2037UL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ALL_ENABLED_EVENTS", (long) (0x3FFF7FFFUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SUCCESS_EVENT_EN", (long) (0x3FFF0002L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SUCCESS_EVENT_DIS", (long) (0x3FFF0003L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SUCCESS_QUEUE_EMPTY", (long) (0x3FFF0004L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SUCCESS_TERM_CHAR", (long) (0x3FFF0005L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SUCCESS_MAX_CNT", (long) (0x3FFF0006L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SUCCESS_DEV_NPRESENT", (long) (0x3FFF007DL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SUCCESS_TRIG_MAPPED", (long) (0x3FFF007EL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SUCCESS_QUEUE_NEMPTY", (long) (0x3FFF0080L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SUCCESS_NCHAIN", (long) (0x3FFF0098L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SUCCESS_NESTED_SHARED", (long) (0x3FFF0099L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SUCCESS_NESTED_EXCLUSIVE", (long) (0x3FFF009AL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SUCCESS_SYNC", (long) (0x3FFF009BL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_WARN_QUEUE_OVERFLOW", (long) (0x3FFF000CL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_WARN_CONFIG_NLOADED", (long) (0x3FFF0077L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_WARN_NULL_OBJECT", (long) (0x3FFF0082L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_WARN_NSUP_ATTR_STATE", (long) (0x3FFF0084L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_WARN_UNKNOWN_STATUS", (long) (0x3FFF0085L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_WARN_NSUP_BUF", (long) (0x3FFF0088L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_WARN_EXT_FUNC_NIMPL", (long) (0x3FFF00A9L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_FIND_BUFLEN", (long) (256), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_INTF_GPIB", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_INTF_VXI", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_INTF_GPIB_VXI", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_INTF_ASRL", (long) (4), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_INTF_TCPIP", (long) (6), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_INTF_USB", (long) (7), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_PROT_NORMAL", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_PROT_FDC", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_PROT_HS488", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_PROT_4882_STRS", (long) (4), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_PROT_USBTMC_VENDOR", (long) (5), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_FDC_NORMAL", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_FDC_STREAM", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_LOCAL_SPACE", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_A16_SPACE", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_A24_SPACE", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_A32_SPACE", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_OPAQUE_SPACE", (long) (0xFFFF), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_UNKNOWN_LA", (long) (-1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_UNKNOWN_SLOT", (long) (-1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_UNKNOWN_LEVEL", (long) (-1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_QUEUE", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_HNDLR", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SUSPEND_HNDLR", (long) (4), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ALL_MECH", (long) (0xFFFF), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ANY_HNDLR", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_ALL", (long) (-2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_SW", (long) (-1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_TTL0", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_TTL1", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_TTL2", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_TTL3", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_TTL4", (long) (4), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_TTL5", (long) (5), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_TTL6", (long) (6), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_TTL7", (long) (7), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_ECL0", (long) (8), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_ECL1", (long) (9), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_PANEL_IN", (long) (27), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_PANEL_OUT", (long) (28), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_PROT_DEFAULT", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_PROT_ON", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_PROT_OFF", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TRIG_PROT_SYNC", (long) (5), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_READ_BUF", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_WRITE_BUF", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_READ_BUF_DISCARD", (long) (4), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_WRITE_BUF_DISCARD", (long) (8), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_IO_IN_BUF", (long) (16), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_IO_OUT_BUF", (long) (32), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_IO_IN_BUF_DISCARD", (long) (64), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_IO_OUT_BUF_DISCARD", (long) (128), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_FLUSH_ON_ACCESS", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_FLUSH_WHEN_FULL", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_FLUSH_DISABLE", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_NMAPPED", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_USE_OPERS", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_DEREF_ADDR", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TMO_IMMEDIATE", (long) (0L), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_TMO_INFINITE", (long) (0xFFFFFFFFUL), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_NO_LOCK", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_EXCLUSIVE_LOCK", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_SHARED_LOCK", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_LOAD_CONFIG", (long) (4), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_NO_SEC_ADDR", (long) (0xFFFF), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_PAR_NONE", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_PAR_ODD", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_PAR_EVEN", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_PAR_MARK", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_PAR_SPACE", (long) (4), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_STOP_ONE", (long) (10), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_STOP_ONE5", (long) (15), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_STOP_TWO", (long) (20), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_FLOW_NONE", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_FLOW_XON_XOFF", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_FLOW_RTS_CTS", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_FLOW_DTR_DSR", (long) (4), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_END_NONE", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_END_LAST_BIT", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_END_TERMCHAR", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASRL_END_BREAK", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_STATE_ASSERTED", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_STATE_UNASSERTED", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_STATE_UNKNOWN", (long) (-1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_BIG_ENDIAN", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_LITTLE_ENDIAN", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_DATA_PRIV", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_DATA_NPRIV", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_PROG_PRIV", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_PROG_NPRIV", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_BLCK_PRIV", (long) (4), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_BLCK_NPRIV", (long) (5), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_D64_PRIV", (long) (6), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_D64_NPRIV", (long) (7), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_WIDTH_8", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_WIDTH_16", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_WIDTH_32", (long) (4), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_REN_DEASSERT", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_REN_ASSERT", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_REN_DEASSERT_GTL", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_REN_ASSERT_ADDRESS", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_REN_ASSERT_LLO", (long) (4), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_REN_ASSERT_ADDRESS_LLO", (long) (5), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_REN_ADDRESS_GTL", (long) (6), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_ATN_DEASSERT", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_ATN_ASSERT", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_ATN_DEASSERT_HANDSHAKE", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_ATN_ASSERT_IMMEDIATE", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_HS488_DISABLED", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_HS488_NIMPL", (long) (-1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_UNADDRESSED", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_TALKER", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_GPIB_LISTENER", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_VXI_CMD16", (long) (0x0200), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_VXI_CMD16_RESP16", (long) (0x0202), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_VXI_RESP16", (long) (0x0002), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_VXI_CMD32", (long) (0x0400), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_VXI_CMD32_RESP16", (long) (0x0402), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_VXI_CMD32_RESP32", (long) (0x0404), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_VXI_RESP32", (long) (0x0004), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASSERT_SIGNAL", (long) (-1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASSERT_USE_ASSIGNED", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASSERT_IRQ1", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASSERT_IRQ2", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASSERT_IRQ3", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASSERT_IRQ4", (long) (4), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASSERT_IRQ5", (long) (5), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASSERT_IRQ6", (long) (6), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_ASSERT_IRQ7", (long) (7), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_UTIL_ASSERT_SYSRESET", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_UTIL_ASSERT_SYSFAIL", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_UTIL_DEASSERT_SYSFAIL", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_VXI_CLASS_MEMORY", (long) (0), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_VXI_CLASS_EXTENDED", (long) (1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_VXI_CLASS_MESSAGE", (long) (2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_VXI_CLASS_REGISTER", (long) (3), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "VI_VXI_CLASS_OTHER", (long) (4), 0, 0, 0},
{0}
};
#ifdef __cplusplus
}
#endif
static swig_variable_info swig_variables[] = {
{0}
};
static swig_command_info swig_commands[] = {
{"Lab::VISA::viOpenDefaultRM", _wrap_viOpenDefaultRM},
{"Lab::VISA::viOpen", _wrap_viOpen},
{"Lab::VISA::viSetAttribute", _wrap_viSetAttribute},
{"Lab::VISA::viGetAttribute", _wrap_viGetAttribute},
{"Lab::VISA::viWrite", _wrap_viWrite},
{"Lab::VISA::viClose", _wrap_viClose},
{"Lab::VISA::viClear", _wrap_viClear},
{"Lab::VISA::viRead", _wrap_viRead},
{"Lab::VISA::viFindRsrc", _wrap_viFindRsrc},
{"Lab::VISA::viFindNext", _wrap_viFindNext},
{0,0}
};

#ifdef __cplusplus
extern "C"
#endif

XS(SWIG_init) {
    dXSARGS;
    int i;
    static int _init = 0;
    if (!_init) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        _init = 1;
    }
    
    /* Install commands */
    for (i = 0; swig_commands[i].name; i++) {
        newXS((char*) swig_commands[i].name,swig_commands[i].wrapper, (char*)__FILE__);
    }
    
    /* Install variables */
    for (i = 0; swig_variables[i].name; i++) {
        SV *sv;
        sv = perl_get_sv((char*) swig_variables[i].name, TRUE | 0x2);
        if (swig_variables[i].type) {
            SWIG_MakePtr(sv,(void *)1, *swig_variables[i].type,0);
        }else {
            sv_setiv(sv,(IV) 0);
        }
        swig_create_magic(sv, (char *) swig_variables[i].name, swig_variables[i].set, swig_variables[i].get); 
    }
    
    /* Install constant */
    for (i = 0; swig_constants[i].type; i++) {
        SV *sv;
        sv = perl_get_sv((char*)swig_constants[i].name, TRUE | 0x2);
        switch(swig_constants[i].type) {
            case SWIG_INT:
            sv_setiv(sv, (IV) swig_constants[i].lvalue);
            break;
            case SWIG_FLOAT:
            sv_setnv(sv, (double) swig_constants[i].dvalue);
            break;
            case SWIG_STRING:
            sv_setpv(sv, (char *) swig_constants[i].pvalue);
            break;
            case SWIG_POINTER:
            SWIG_MakePtr(sv, swig_constants[i].pvalue, *(swig_constants[i].ptype),0);
            break;
            case SWIG_BINARY:
            /*      obj = SWIG_NewPackedObj(swig_constants[i].pvalue, swig_constants[i].lvalue, *(swig_constants[i].ptype)); */
            break;
            default:
            break;
        }
        SvREADONLY_on(sv);
    }
    
    ST(0) = &PL_sv_yes;
    XSRETURN(1);
}

